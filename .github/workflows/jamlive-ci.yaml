name: jamlive-ci

on:
  push:
    branches: ["master"]
    paths-ignore:
      - "README.md"
      - "postman/**"
      - "screenshots/**"
      - "terraform/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  packages: write

concurrency:
  group: jamlive-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cancel-previous:
    name: Cancel Previous Workflow Runs
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

  detect_changes:
    name: Detect Code Changes
    needs: cancel-previous
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  frontend_build_and_test:
    name: Frontend Build & Test
    needs: detect_changes
    uses: ./.github/workflows/build-and-unit-test.yaml
    permissions:
      packages: write
    with:
      project: frontend
      should_run: ${{ needs.detect_changes.outputs.frontend }}
      timeout-minutes: 30

  backend_build_and_test:
    name: Backend Build & Test
    needs: detect_changes
    uses: ./.github/workflows/build-and-unit-test.yaml
    permissions:
      packages: write
    with:
      project: backend
      should_run: ${{ needs.detect_changes.outputs.backend }}
      timeout-minutes: 30

  package_e2e_tests_and_publish:
    name: Package E2E Tests and Publish
    needs: [frontend_build_and_test, backend_build_and_test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      OWNER: segevgr
    outputs:
      version_tag: ${{ steps.version.outputs.new_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch Version
        id: version
        uses: ./.github/actions/version-increment

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_ACCESS_TOKEN }}

      - name: Debug GHCR Cache Manifest
        run: |
          echo "=== FRONTEND BUILDER TAG ==="
          curl -s -H "Authorization: Bearer ${{ secrets.GHCR_ACCESS_TOKEN }}" \
            https://ghcr.io/v2/segevgr/frontend/tags/list | jq .

      - name: Build and Cache Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          load: true
          target: runner
          tags: jamlive/frontend:test
          build-args: |
            REACT_APP_BASE_URL=${{ secrets.BACKEND_URL }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ env.OWNER }}/frontend:builder,mode=max
            type=gha,scope=frontend-runner,mode=max
          cache-to: type=gha,scope=frontend-runner,mode=max

      - name: Build and Cache Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          load: true
          target: runner
          tags: jamlive/backend:test
          cache-from: |
            type=registry,ref=ghcr.io/${{ env.OWNER }}/backend:builder,mode=max
            type=gha,scope=backend-runner,mode=max
          cache-to: type=gha,scope=backend-runner,mode=max

      - name: Run Docker Compose
        env:
          MONGO_URI: "mongodb://db:27017/jamlive_dev"
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: docker compose up -d

      - name: Wait for all Docker services to be healthy
        uses: raschmitt/wait-for-healthy-container@v1.0.1
        with:
          container-name: jamlive-frontend
          timeout: 30

      - name: E2E Tests
        uses: ./.github/actions/e2e-tests

      - name: Configure AWS
        uses: ./.github/actions/configure-aws
        with:
          aws_role_arn: ${{ secrets.ECR_ROLE_ARN }}
          aws_region: ${{ secrets.AWS_REGION }}

      - name: Publish Backend Image To ECR
        uses: ./.github/actions/publish-to-ecr
        with:
          local_image: jamlive/backend:test
          repo_uri: ${{ secrets.BACKEND_ECR_URI }}
          tag: ${{ steps.version.outputs.new_tag }}

      - name: Publish Frontend Image To ECR
        uses: ./.github/actions/publish-to-ecr
        with:
          local_image: jamlive/frontend:test
          repo_uri: ${{ secrets.FRONTEND_ECR_URI }}
          tag: ${{ steps.version.outputs.new_tag }}

      - name: Export Frontend Build
        run: |
          container_id=$(docker ps -qf "ancestor=jamlive/frontend:test")
          docker cp $container_id:/app/build ./frontend_build

      - name: Publish Frontend Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend_build
          path: ./frontend_build
          retention-days: 1

  deploy_frontend:
    name: Deploy Frontend
    needs: package_e2e_tests_and_publish
    uses: ./.github/workflows/frontend-cd.yaml
    secrets: inherit
    permissions:
      id-token: write
    with:
      artifact: frontend_build
      version: ${{ needs.package_e2e_tests_and_publish.outputs.version_tag }}

  # deploy_backend:
  #   name: Deploy Backend
  #   needs: package_e2e_tests_and_publish
  #   uses: ./.github/workflows/backend-cd.yaml
  #   secrets: inherit
  #   permissions:
  #     id-token: write
  #   with:
  #     artifact: backend_build

  create_git_tag:
    name: Create Git Tag from Version
    runs-on: ubuntu-latest
    # needs: [package_e2e_tests_and_publish, deploy_frontend, deploy_backend]
    needs: [package_e2e_tests_and_publish, deploy_frontend]
    
    steps:
      - uses: actions/checkout@v4

      - run: |
          git tag ${{ needs.package_e2e_tests_and_publish.outputs.version_tag }}
          git push origin ${{ needs.package_e2e_tests_and_publish.outputs.version_tag }}

  notify:
    name: Notify
    if: always()
    needs:
      - cancel-previous
      - detect_changes
      - frontend_build_and_test
      - backend_build_and_test
      - package_e2e_tests_and_publish
      - deploy_frontend
      # - deploy_backend
      - create_git_tag
    uses: ./.github/workflows/notify-by-email.yaml
    secrets: inherit
